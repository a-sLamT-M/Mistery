@using MisteryBlazor.Data.GroupsModel
@using MisteryBlazor.StringUtils
@using Color = AntDesign.Color
@using System.Text
@using MisteryBlazor.Pages.ContextMenu
@{
    StringBuilder sb = new();
    sb.Append("room-sidebar-category-").Append(ChannelsMap.Key.Id.ToString());

    <div id="@sb.ToString()" class="unable-to-select">
        <MudPaper Width="251px" Elevation="0" >
            <MudTreeView Color="@color" @bind-SelectedValue="SelectedValue" T="string" id="@sb.ToString()">
                <MudTreeViewItem Value="@ChannelsMap.Key.CategoryName.ToStringFromASCIIByte()" Icon="@Icons.Filled.Label">
                @foreach (var ch in ChannelsMap.Value)
                        {
                            sb.Clear();
                            sb.Append("room-sidebar-").Append(ch.Id);
                            <div id="@sb.ToString()">
                                <MudTreeViewItem Value="@ch.ChannelName.ToStringFromASCIIByte()" Icon="@Icons.Filled.Group" OnClick="()=>OnClick.InvokeAsync(ch.Id)"/>
                            </div>
                                HashSet<MisteryMenuItem> ChannelMenu = new();
                                if (IsOwned || HasRenamePermission)
                                {
                                    ChannelMenu.Add(new MisteryMenuItem("重命名"));
                                }
                                if (IsOwned || HasCategoryDeletePermission)
                                {
                                    ChannelMenu.Add(new MisteryMenuItem("删除频道", arg => HandleCategoryDelete.InvokeAsync(ChannelsMap.Key)));
                                }
                                ChannelMenu.Add(MisteryMenuItem.MisteryMenuDivider());
                                ChannelMenu.Add(new MisteryMenuItem("属性"));
                                <MisteryContextMenu Id="room-sidebar-channelmenu" Items="@ChannelMenu" TargetId="@sb.ToString()"/>
                        }
                </MudTreeViewItem>
            </MudTreeView>
        </MudPaper>
    </div>
}

@{
    sb.Clear();
    sb.Append("room-sidebar-category-").Append(ChannelsMap.Key.Id.ToString());
    HashSet<MisteryMenuItem> CategoryMenu = new();
    @if (IsOwned || HasRenamePermission)
    {
        CategoryMenu.Add(new MisteryMenuItem("重命名"));
    }
    @if (IsOwned || HasChannelCreatePermission)
    {
        CategoryMenu.Add(new MisteryMenuItem("创建频道", arg => HandleChannelCreate.InvokeAsync(ChannelsMap.Key)));
    }
    @if (IsOwned || HasCategoryDeletePermission)
    {
        CategoryMenu.Add(new MisteryMenuItem("删除类别", arg => HandleCategoryDelete.InvokeAsync(ChannelsMap.Key)));
    }
    CategoryMenu.Add(MisteryMenuItem.MisteryMenuDivider());
    CategoryMenu.Add(new MisteryMenuItem("属性"));
    <MisteryContextMenu Id="room-sidebar-categorymenu" Items="@CategoryMenu" TargetId="@sb.ToString()"/>
}

@code {
    [ParameterAttribute]
    public MudBlazor.Color color { get; set; }

    [ParameterAttribute]
    public KeyValuePair<ChannelCategory, IList<Channel>> ChannelsMap { get; set; } = new();

    [ParameterAttribute]
    public EventCallback<ChannelCategory> HandleCategoryDelete { get; set; }
    [ParameterAttribute]
    public EventCallback HandleCategoryRename { get; set; }
    [ParameterAttribute]
    public EventCallback<ChannelCategory> HandleChannelCreate { get; set; }
    [ParameterAttribute]
    public EventCallback<int> OnClick { get; set; }

    [ParameterAttribute]
    public bool IsOwned { get; set; } = false;
    [ParameterAttribute]
    public bool HasRenamePermission { get; set; } = false;
    [ParameterAttribute]
    public bool HasCategoryDeletePermission { get; set; } = false;
    [ParameterAttribute]
    public bool HasChannelCreatePermission { get; set; } = false;

    [ParameterAttribute]
    public string SelectedValue { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var a = 0;
    }
}