@using MisteryBlazor.Data.GroupsModel
@using MisteryBlazor.StringUtils
@using Color = AntDesign.Color
@using System.Text
@{
    StringBuilder sb = new();
    sb.Append("room-sidebar-category-").Append(ChannelsMap.Key.Id.ToString());

    <div id="@sb.ToString() "@oncontextmenu="HidMainContextMenu">
        <Dropdown Trigger="new Trigger[] { Trigger.ContextMenu }"
                  BoundaryAdjustMode="TriggerBoundaryAdjustMode.InScroll"
                  Disabled="@IsCategoryContextmenuDisabled"
                  OnOverlayHiding="@EnableMainContextMenu">
            <Overlay>
                <Menu>
                    @if (IsOwned || HasRenamePermission)
                    {
                        <MenuItem>重命名</MenuItem>
                    }
                    @if (IsOwned || HasChannelCreatePermission)
                    {
                        <MenuItem OnClick="async () => await HandleChannelCreate.InvokeAsync(ChannelsMap.Key)">创建频道</MenuItem>
                    }
                    @if (IsOwned || HasCategoryDeletePermission)
                    {
                        <MenuItem OnClick="async () => await HandleCategoryDelete.InvokeAsync(ChannelsMap.Key)">删除类别</MenuItem>
                    }
                    <MenuDivider/>

                    <MenuItem>类别属性</MenuItem>
                </Menu>
            </Overlay>
            <ChildContent>
                <MudPaper Width="308px" Elevation="0" >
                    <MudTreeView Color="@color" @bind-SelectedValue="SelectedValue" T="string">
                        <MudTreeViewItem Value="@ChannelsMap.Key.CategoryName.ToStringFromASCIIByte()" Icon="@Icons.Filled.Label">
                            @foreach (var ch in ChannelsMap.Value)
                            {
                                <MudTreeViewItem Value="@ch.ChannelName.ToStringFromASCIIByte()"Icon="@Icons.Filled.Group"/>
                            }
                        </MudTreeViewItem>
                    </MudTreeView>
                </MudPaper>
            </ChildContent>
        </Dropdown>
    </div>
}


@code {
    [ParameterAttribute]
    public bool IsCategoryContextmenuDisabled { get; set; }
    [ParameterAttribute]
    public MudBlazor.Color color { get; set; }


    [ParameterAttribute]
    public KeyValuePair<ChannelCategory, IList<Channel>> ChannelsMap { get; set; } = new();

    [ParameterAttribute]
    public EventCallback<ChannelCategory> HandleCategoryDelete { get; set; }
    [ParameterAttribute]
    public EventCallback HandleCategoryRename { get; set; }
    [ParameterAttribute]
    public EventCallback<ChannelCategory> HandleChannelCreate { get; set; }

    [ParameterAttribute]
    public EventCallback HidMainContextMenu { get; set; }
    [ParameterAttribute]
    public EventCallback EnableMainContextMenu { get; set; }

    [ParameterAttribute]
    public bool IsOwned { get; set; } = false;
    [ParameterAttribute]
    public bool HasRenamePermission { get; set; } = false;
    [ParameterAttribute]
    public bool HasCategoryDeletePermission { get; set; } = false;
    [ParameterAttribute]
    public bool HasChannelCreatePermission { get; set; } = false;

    [ParameterAttribute]
    public string SelectedValue { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var a = 0;
    }
}