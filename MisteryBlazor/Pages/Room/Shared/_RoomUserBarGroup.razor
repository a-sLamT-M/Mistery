@using MisteryBlazor.Pages.Room.Dialog
@using MisteryBlazor.Pages.Room.Dialog.GroupsDialog
@using Placement = AntDesign.Placement
@using MisteryBlazor.Pages.ContextMenu
@using System.Text
@using MongoDB.Driver

<link href="_content/AntDesign/css/ant-design-blazor.dark.css" rel="stylesheet" />


<div id="@Id" class="room-userbargroup ">
    <span class="room-userbargroup-avatar">
            @if(groupName.Length > 0)
            { 
                <MudAvatar Style="height: 50px; width: 50px;">
                    @groupName[0]
                </MudAvatar>
            }
            else
            {
                <MudAvatar Style="height: 50px; width: 50px;">
                    ?
                </MudAvatar>
            }
        </span>
</div>

<RenameGroupDialog
    Visible="@D_Para.IsRenameGroupDialogVisible" 
    HandleCancel="D_Para.HandleCancel"
    HandleOk="async name => {await Rename(name);}"
    Name="@groupName"
/>

<DeleteGroup 
    Visible="@D_Para.IsDeleteDialogVisible" 
    HandleCancel="D_Para.HandleCancel"
    HandleOk="Delete"
    Context="@groupName"
/>

@{
    StringBuilder sb = new();
    sb.Append(Id).Append("-menu");

    HashSet<MisteryMenuItem> items = new();
    if (HasRenamePermission || IsOwned)
    {
        items.Add(new MisteryMenuItem("修改名称", args => D_Para.IsRenameGroupDialogVisible = true));
    }

    if (HasInvitePermission || IsOwned)
    {
        items.Add(new MisteryMenuItem("创建邀请链接"));
        items.Add(MisteryMenuItem.MisteryMenuDivider());
    }
    items.Add(new MisteryMenuItem("属性"));
    if (IsOwned)
    {
        items.Add(MisteryMenuItem.MisteryMenuDivider());
        items.Add(new MisteryMenuItem("解散",arg => { D_Para.IsDeleteDialogVisible = true; }));
    }
    else
    {
        items.Add(new MisteryMenuItem("退出",arg => { D_Para.IsDeleteDialogVisible = true; }));
    }
    <MisteryContextMenu Id="@sb.ToString()" Items="@items" TargetId="@Id"/>
}

@code {
    class DialogPara
    {
        public bool IsDeleteDialogVisible { get; set; } = false;
        public bool IsRenameGroupDialogVisible { get; set; } = false;

        public void HandleCancel()
        {
            IsDeleteDialogVisible = false;
            IsRenameGroupDialogVisible = false;
        }
    }

    DialogPara D_Para = new();
    [ParameterAttribute]
    public string groupName { get; set; }
    [ParameterAttribute]
    public int gid { get; set; }
    [ParameterAttribute]
    public EventCallback OnClick { get; set; }
    [ParameterAttribute] 
    public string Id { get; set; }
    [ParameterAttribute]
    public string avatarUri { get; set; }
    [ParameterAttribute]
    public EventCallback HandleDelete { get; set; }
    [ParameterAttribute]
    public EventCallback<string> HandleRename { get; set; }
    [ParameterAttribute]
    public bool IsOwned { get; set; }
    [ParameterAttribute]
    public bool HasRenamePermission { get; set; } = false;
    [ParameterAttribute]
    public bool HasInvitePermission { get; set; } = false;

    private async Task Delete()
    {
        await HandleDelete.InvokeAsync();
        D_Para.IsDeleteDialogVisible = false;
    }

    private async Task Rename(string name)
    {
        await HandleRename.InvokeAsync(name);
        D_Para.IsRenameGroupDialogVisible = false;
    }
}