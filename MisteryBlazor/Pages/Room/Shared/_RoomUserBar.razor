@using Microsoft.AspNetCore.Identity
@using MisteryBlazor.Data.GroupsModel
@using MisteryBlazor.Data.User
@using MisteryBlazor.Services.DAL
@using System.Security.Claims
@using System.Text
@using MisteryBlazor.Pages.Room.Dialog
@using MisteryBlazor.Services.DataManager
@using MisteryBlazor.StringUtils
@using static System.Linq.Enumerable
@inject GroupDataService gps;
@inject IDialogService DialogService;
@inject NavigationManager uriHelper;
@inject GroupsManager Gm;
@inject IJSRuntime JS;
@inject ISnackbar Snackbar;
@inject ChannelsManager Cm;

@if (groups is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <AuthorizeView>
        <Authorized>
            <div class=" room-userbar mud-theme-secondary mud-elevation-4">
                <div class="room-userbar-avatar mt-1">
                    <MudIconButton Style="height: 50px; width: 50px;" class="rounded-circle" Size="Size.Large">
                        <MudAvatar Style="height: 50px; width: 50px; font-size: 1.7rem;">L</MudAvatar>
                    </MudIconButton>
                </div>
                <span class="room-userbar-split">
                    <MudDivider DividerType="DividerType.Middle"></MudDivider>
                </span>
                <div class="room-userbar-scroll border-solid mud-elevation-3">
                    @if (groups.Any())
                    {
                        StringBuilder sb = new();
                        <div class="room-userbar-groups-func">
                            @foreach (var group in comparedGroups)
                            {
                                if(group.Key.IsDeleted) continue;
                                sb.Append("room-groupcom-").Append(group.Key.Id.ToString());
                                <_RoomUserBarGroup
                                    groupName=@group.Key.GroupName.ToStringFromASCIIByte()
                                    OnClick="() => { GroupCompOnClick(group.Key.Id); }" 
                                    Id="@sb.ToString()"
                                    IsOwned="group.Value"
                                    HandleDelete="() => { HandleDelete(group.Key.Id); }"
                                    HandleRename=" name => { HandleRename(userId, group.Key.Id, name);}"
                                />
                                sb.Clear();
                            }
                        </div>
                    }
                    <span class="room-userbar-split pt-1">
                        <MudDivider DividerType="DividerType.Middle"></MudDivider>
                    </span>
                    <div class="room-userbar-add-button pt-3">
                        <div class="room-userbar-add">
                            <MudIconButton Style="height: 50px; width: 50px;" class="rounded-circle " Icon="@Icons.Filled.GroupAdd" Variant="Variant.Filled" Color="MudBlazor.Color.Success" Size="Size.Large" @onclick="OpenAddGroupDialog"/>
                        </div>
                    </div>
                    <div class="room-userbar-add-button pt-3">
                        <div class="room-userbar-add">
                            <MudIconButton Style="height: 50px; width: 50px;" class="rounded-circle" Icon="@Icons.TwoTone.Search" Variant="Variant.Filled" Color="MudBlazor.Color.Success" Size="Size.Large"/>
                        </div>
                    </div>
                </div>
                </div>
        </Authorized>
    </AuthorizeView>
}

@code {
    [ParameterAttribute]
    public string userId { get; set; }
    [ParameterAttribute]
    public IList<Group> groups { get; set; }
    [ParameterAttribute]
    public Dictionary<Group, bool> comparedGroups { get; set; } // bool: if owned
    [ParameterAttribute]
    public int currectGroup { get; set; } = 0;
    [ParameterAttribute]
    public int lastGroup { get; set; } = 0;
    [ParameterAttribute]
    public EventCallback<int> OnCurrectGroupChanged { get; set; }
    [ParameterAttribute]
    public EventCallback<IList<Group>> OnGroupAdded { get; set; }
    private async Task OpenAddGroupDialog()
    {
        var para = new DialogParameters();
        para.Add("Uid", userId);
        MudBlazor.DialogOptions options = new MudBlazor.DialogOptions()
        {
            CloseOnEscapeKey = true,
            CloseButton = true,
            MaxWidth = MaxWidth.ExtraLarge,
            Position = DialogPosition.TopCenter
        };
        var dialog = DialogService.Show<CreateGroupDialog>("Create a group", para, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            groups = await gps.GetGroupsFromUserAsync("RoomUserBar: Getting Groups.", userId)!;
            await OnGroupAdded.InvokeAsync(groups);
        }
    }

    private async Task GroupCompOnClick(int id)
    {
        StringBuilder sb = new();
        currectGroup = id;

        if (lastGroup == 0)
        {
            lastGroup = id;
        }
        else if(currectGroup != lastGroup)
        {
            sb.Append("room-groupcom-").Append(lastGroup.ToString());
            await JS.InvokeVoidAsync("ChangeClass", sb.ToString(),"room-userbargroup");
            lastGroup = currectGroup;
            sb.Clear();
        }

        sb.Append("room-groupcom-").Append(id.ToString());
        await JS.InvokeVoidAsync("ChangeClass", sb.ToString(),"room-userbargroup-onclick");
        sb.Clear();
        await OnCurrectGroupChanged.InvokeAsync(currectGroup);
    }

    private async Task HandleDelete(int id)
    {
        try
        {
            await Gm.DeleteGroup(userId, id);
            Snackbar.Add("成功解散该群组", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add("无法解散该群组", Severity.Error);
        }
    }

    private async Task HandleRename(string uid, int gid, string name)
    {
        try
        {
            await Gm.UpdateGroupName(gid, uid, name);
            Snackbar.Add("成功命名该群组", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add("无法命名该群组", Severity.Error);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Gm.GroupNameUpdatedEvent += GroupCompOnClick;
    }
}