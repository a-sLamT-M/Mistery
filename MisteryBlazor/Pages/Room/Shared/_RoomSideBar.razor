@page "/test"
@using System.Security.Claims
@using System.Text
@using MisteryBlazor.Data.GroupsModel
@using MisteryBlazor.Pages.Room.Dialog
@using MisteryBlazor.Pages.Room.Shared.DetialPage
@using MisteryBlazor.Services.DAL
@using MisteryBlazor.Services.DataManager
@using MisteryBlazor.Services.Events
@using MisteryBlazor.StringUtils
@using Placement = AntDesign.Placement
@using Color = MudBlazor.Color
@inject GroupDataService gps;
@inject ChannelsManager Cm;
@inject GroupsManager Gm;
@inject GroupManagerEvents Gme;
@inject ISnackbar Snackbar;

<div class="room-sidebar mud-theme-primary mud-elevation-8">
    <Dropdown Trigger="new Trigger[] { Trigger.ContextMenu }"
              BoundaryAdjustMode="TriggerBoundaryAdjustMode.InScroll"
              Class="room-sidebar-channels-main-context-menu"
              Disabled="@C_Para.IsMainContextmenuDisabled"
              OnOverlayHiding="C_Para.EnableCategoryContextMenu">
        <Overlay>
            <Menu>
                @if (IsOwned && !C_Para.IsMainContextmenuDisabled)
                {
                    <MenuItem OnClick="() => { D_Para.CreateCategoryVisible = true; }">创建一个类别</MenuItem>
                }
                @if (HasInvitePermission || IsOwned)
                {
                    <MenuItem>创建邀请链接</MenuItem>
                }
                <MenuDivider/>
                <MenuItem>群属性</MenuItem>
            </Menu>
        </Overlay>
        <ChildContent>
            @if (CurrectGroup.Key is not null && !CurrectGroup.Key.IsDeleted)
            {
                <div class="room-sidebar-top mud-theme-primary">

                            <div class="room-sidebar-textgroup">
                                <div class="fs-4 fw-bold room-sidebar-top-text">@CurrectGroup.Key.GroupName.ToStringFromASCIIByte()</div>
                                <div class="fs-7 room-sidebar-top-text-id"># @CurrectGroup.Key.Id</div>
                            </div>
                </div>
                @if (ChannelsMap.Count <= 0)
                {
                    @if (IsOwned)
                    {
                        <div class="room-sidebar-alert">
                            <p>该群组还没有任何频道！</p></div>
                        <div class="room-sidebar-alert-text">① 在<span style="font-weight: bold;"> 空白处 </span>
                            右键添加一个类别</div>
                        <div class="room-sidebar-alert-text">
                            <p>② 在类别名称上右键新建一个频道</p></div>
                    }
                    else
                    {
                        <div class="room-sidebar-alert">
                            <p>该群组还没有任何频道！</p></div>
                    }
                }
            }
            <div class="room-sidebar-channels ">
                <div class="room-sidebar-category-scroll">
                    @foreach (var c in ChannelsMap)
                    {
                        if (!c.Key.IsDeleted)
                        {
                            <div @oncontextmenu="C_Para.HidMainContextMenu">

                                <Dropdown Trigger="new Trigger[] { Trigger.ContextMenu }"
                                          BoundaryAdjustMode="TriggerBoundaryAdjustMode.InScroll"
                                          Disabled="@C_Para.IsCategoryContextmenuDisabled"
                                          OnOverlayHiding="C_Para.EnableMainContextMenu">
                                    <Overlay>
                                        <Menu>
                                            @if (HasInvitePermission || IsOwned)
                                            {
                                                <MenuItem>删除</MenuItem>
                                                <MenuItem>创建频道</MenuItem>
                                                <MenuDivider/>
                                            }
                                            <MenuItem>类别属性</MenuItem>
                                        </Menu>
                                    </Overlay>
                                    <ChildContent>
                                        <MudPaper Width="308px" Elevation="0" Class="room-sidebar-category-mudpaper">
                                            <MudTreeView Color="Color.Dark" @bind-SelectedValue="SelectedValue" T="string">
                                                <MudTreeViewItem Value="@c.Key.CategoryName.ToStringFromASCIIByte()" Icon="@Icons.Filled.Label">
                                                    @foreach (var ch in c.Value)
                                                    {
                                                        <MudTreeViewItem Value="@ch.ChannelName.ToStringFromASCIIByte()" Icon="@Icons.Filled.Group"/>
                                                    }
                                                </MudTreeViewItem>
                                            </MudTreeView>
                                        </MudPaper>
                                    </ChildContent>
                                </Dropdown>
                            </div>
                        }
                    }
                </div>
            </div>
        </ChildContent>
    </Dropdown>


    <div class="room-sidebar-voice mud-theme-secondary" style="display: none;">
        <div class="room-sidebar-voice-voiceInfoIco mud-theme-secondary">
            <span class="room-sidebar-voice-voiceico">
                <MudIcon Icon="@Icons.Outlined.SignalCellularAlt" Size="Size.Medium"></MudIcon>
            </span>
            <div class="room-sidebar-voice-VoiceInfo">
                <div class="fw-bold room-sidebar-voice-VoiceInfo-text-VoiceConnected">Voice Connected</div>
                <div class="room-sidebar-voice-VoiceInfo-text-stream">Stream</div>
            </div>
        </div>
        <div class="room-sidebar-voice-icons">
            <span class="room-sidebar-voice-icons-OutlinedInfo">
                <MudIcon Icon="@Icons.Outlined.Info"></MudIcon>
            </span>
            <span class="room-sidebar-voice-icons-FulledCall">
                <MudIcon Icon="@Icons.Filled.Call"></MudIcon>
            </span>
        </div>
    </div>

    <div class="room-sidebar-profile mud-theme-secondary mud-elevation-5">
        <span class="room-sidebar-profile-avatar">
            <MudAvatar Size="Size.Medium"></MudAvatar>
        </span>
        @{
            StringBuilder UserId = new();
            UserId.Append("# ").Append(@userId);
            <div class="room-sidebar-profile-info">
                <div class="fs-7 room-sidebar-profile-info-name fw-bold">@UserName</div>
                <div class="room-sidebar-profile-info-id">@userId</div>
            </div>
        }
        <div class="room-sidebar-profile-icons">
            <span class="room-sidebar-profile-icons-mic">
                <MudIcon Icon="@Icons.Filled.Mic" Size="Size.Medium"></MudIcon>
            </span>
            <span class="room-sidebar-profile-icons-headset">
                <MudIcon Icon="@Icons.Filled.Headset" Size="Size.Medium"></MudIcon>
            </span>
            <span class="room-sidebar-profile-icons-setting">
                <MudIcon Icon="@Icons.Filled.Settings" Size="Size.Medium"></MudIcon>
            </span>
        </div>
    </div>
</div>

<CreateCategory
    Visible="@D_Para.CreateCategoryVisible"
    HandleCancel="@D_Para.HandleCancel"
    HandleOk="async name => {await DoCreateCategory(name);}"
/>

@code {
    string SelectedValue { get; set; }
    class DialogPara
    {
        public bool CreateCategoryVisible { get; set; } = false;
        public bool IsRenameGroupDialogVisible { get; set; } = false;
        public void HandleCancel()
        {
            CreateCategoryVisible = false;
            IsRenameGroupDialogVisible = false;
        }
    }    DialogPara D_Para = new();

    class ContextMenuPara
    {
        public bool IsMainContextmenuDisabled = false;
        public bool IsCategoryContextmenuDisabled = false;
        public void HidMainContextMenu()
        {
            IsMainContextmenuDisabled = true;
        }
        public void EnableMainContextMenu()
        {
            IsMainContextmenuDisabled = false;
        }
        public void HidCategoryContextMenu()
        {
            IsCategoryContextmenuDisabled = true;
        }
        public void EnableCategoryContextMenu()
        {
            IsCategoryContextmenuDisabled = false;
        }

    }

    ContextMenuPara C_Para = new();

    [ParameterAttribute]
    public KeyValuePair<Group,bool> CurrectGroup { get; set; }
    [ParameterAttribute]
    public string userId { get; set; }
    [ParameterAttribute]
    public string UserName { get; set; }
    [ParameterAttribute]
    public Dictionary<ChannelCategory, IList<Channel>> ChannelsMap { get; set; } = new();
    [ParameterAttribute]
    public bool HasInvitePermission { get; set; } = false;
    [ParameterAttribute]
    public bool IsOwned { get; set; } = false;

    public async Task DoCreateCategory(string name)
    {
        try
        {
            await Cm.CreateCategory(name, userId, CurrectGroup.Key.Id);
            Snackbar.Add("成功创建该类别", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add("无法创建该类别", Severity.Error);
        }
        D_Para.CreateCategoryVisible = false;
    }

    protected override async Task OnInitializedAsync()
    {
         Gme.SelectedGroupChangedEvent += async value =>
         {
             CurrectGroup = value;
             ChannelsMap = Cm.ChannelsDictionary;
         };
    }
}
