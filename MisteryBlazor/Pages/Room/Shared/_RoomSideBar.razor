@page "/test"
@using System.Security.Claims
@using System.Text
@using MisteryBlazor.Data.GroupsModel
@using MisteryBlazor.Pages.Room.Dialog
@using MisteryBlazor.Pages.Room.Dialog.ChannelDialog
@using MisteryBlazor.Pages.Room.Shared.DetialPage
@using MisteryBlazor.Services.DAL
@using MisteryBlazor.Services.DataManager
@using MisteryBlazor.Services.Events
@using MisteryBlazor.StringUtils
@using OneOf.Types
@using Placement = AntDesign.Placement
@using Color = MudBlazor.Color
@inject GroupDataService Gps;
@inject ChannelsManager Cm;
@inject GroupsManager Gm;
@inject GroupManagerEvents Gme;
@inject ChannelManagerEvents Cme;
@inject ISnackbar Snackbar;

<div class="room-sidebar mud-theme-primary mud-elevation-8" @oncontextmenu="C_Para.EnableMainContextMenu">
    <Dropdown Trigger="new Trigger[] { Trigger.ContextMenu }"
              BoundaryAdjustMode="TriggerBoundaryAdjustMode.InScroll"
              Class="room-sidebar-channels-main-context-menu"
              Disabled="@C_Para.IsMainContextmenuDisabled"
              OnOverlayHiding="@C_Para.Init">
        <Overlay>
            <Menu>
                @if ((IsOwned || HasCategoryCreatePermission) && !C_Para.IsMainContextmenuDisabled)
                {
                    <MenuItem OnClick="() => { D_Para.CreateCategoryVisible = true; }">创建一个类别</MenuItem>
                }
                @if (HasInvitePermission || IsOwned)
                {
                    <MenuItem>创建邀请链接</MenuItem>
                }
                <MenuDivider/>
                <MenuItem>群属性</MenuItem>
            </Menu>
        </Overlay>
        <ChildContent>
            @if (CurrectGroup.Key is not null && !CurrectGroup.Key.IsDeleted)
            {
                <div class="room-sidebar-top mud-theme-primary">

                            <div class="room-sidebar-textgroup">
                                <div class="fs-4 fw-bold room-sidebar-top-text">@CurrectGroup.Key.GroupName.ToStringFromASCIIByte()</div>
                                <div class="fs-7 room-sidebar-top-text-id"># @CurrectGroup.Key.Id</div>
                            </div>
                </div>
                @if (ChannelsMap.Count <= 0)
                {
                    <div style="float: left;">
                        @if (IsOwned || HasCategoryCreatePermission)
                        {
                            <div class="room-sidebar-alert">
                                <p>该群组还没有任何频道！</p></div>
                            <div class="room-sidebar-alert-text">① 在<span style="font-weight: bold;"> 空白处 </span>
                                右键添加一个类别</div>
                            <div class="room-sidebar-alert-text">
                                <p>② 在类别名称上右键新建一个频道</p></div>
                        }
                        else
                        {
                            <div class="room-sidebar-alert">
                                <p>该群组还没有任何频道！</p></div>
                        }
                    </div>
                }
            }
            <div class="room-sidebar-channels">
                <div class="room-sidebar-category-scroll">
                    @foreach (var c in ChannelsMap)
                    {
                        if (!c.Key.IsDeleted)
                        {
                            <_RoomSidebarChannel
                                color="Color.Dark"
                                ChannelsMap="new KeyValuePair<ChannelCategory, IList<Channel>>(c.Key, c.Value)"
                                IsOwned="@IsOwned"
                                OnClick="id=> ChannelCompOnClick(id)"
                                HandleChannelCreate="current => { D_Para.CurrentCategory = current; D_Para.CreateChannelDialogVisible = true; }"
                                HandleCategoryDelete="current => { D_Para.CurrentCategory = current; D_Para.IsDeleteCategoryDialogVisible = true; }"
                                EnableCategoryMenuCallback="C_Para.EnableCategoryContextMenu"
                                EnableChannelMenuCallback="C_Para.EnableChannelContextMenu"
                                IsChannelContextmenuDisabled="@C_Para.IsChannelContextMenuDisabled"
                                IsCategoryContextmenuDisabled="@C_Para.IsCategoryContextmenuDisabled"
                                OnOverlayHidingCallback="@C_Para.Init"
                            />
                        }
                    }
                </div>
            </div>
        </ChildContent>
    </Dropdown>

    <div class="room-sidebar-voice mud-theme-secondary" style="display: none;">
        <div class="room-sidebar-voice-voiceInfoIco mud-theme-secondary">
            <span class="room-sidebar-voice-voiceico">
                <MudIcon Icon="@Icons.Outlined.SignalCellularAlt" Size="Size.Medium"></MudIcon>
            </span>
            <div class="room-sidebar-voice-VoiceInfo">
                <div class="fw-bold room-sidebar-voice-VoiceInfo-text-VoiceConnected">Voice Connected</div>
                <div class="room-sidebar-voice-VoiceInfo-text-stream">Stream</div>
            </div>
        </div>
        <div class="room-sidebar-voice-icons">
            <span class="room-sidebar-voice-icons-OutlinedInfo">
                <MudIcon Icon="@Icons.Outlined.Info"></MudIcon>
            </span>
            <span class="room-sidebar-voice-icons-FulledCall">
                <MudIcon Icon="@Icons.Filled.Call"></MudIcon>
            </span>
        </div>
    </div>

    <div class="room-sidebar-profile mud-theme-secondary mud-elevation-5">
        <span class="room-sidebar-profile-avatar">
            <MudAvatar Size="Size.Medium"></MudAvatar>
        </span>
        @{
            StringBuilder UserId = new();
            UserId.Append("# ").Append(@userId);
            <div class="room-sidebar-profile-info">
                <div class="fs-7 room-sidebar-profile-info-name fw-bold">@UserName</div>
                <div class="room-sidebar-profile-info-id">@userId</div>
            </div>
        }
        <div class="room-sidebar-profile-icons">
            <span class="room-sidebar-profile-icons-mic">
                <MudIcon Icon="@Icons.Filled.Mic" Size="Size.Medium"></MudIcon>
            </span>
            <span class="room-sidebar-profile-icons-headset">
                <MudIcon Icon="@Icons.Filled.Headset" Size="Size.Medium"></MudIcon>
            </span>
            <span class="room-sidebar-profile-icons-setting">
                <MudIcon Icon="@Icons.Filled.Settings" Size="Size.Medium"></MudIcon>
            </span>
        </div>
    </div>
</div>

<CreateCategoryDialog
    Visible="@D_Para.CreateCategoryVisible"
    HandleCancel="@D_Para.HandleCancel"
    HandleOk="async name => await DoCreateCategory(name)"
/>

<CreateChannelDialog
    Visible="@D_Para.CreateChannelDialogVisible"
    HandleCancel="@D_Para.HandleCancel"
    HandleOk="async name => await DoCreateChannel(name)"
/>

<DeleteCategory
    Id="@D_Para.CurrentCategory.Id"
    Context="@D_Para.CurrentCategory.CategoryName.ToStringFromASCIIByte()"
    Visible="@D_Para.IsDeleteCategoryDialogVisible"
    HandleCancel="@D_Para.HandleCancel"
    HandleOk="async id => await DeleteCategory(id)"
/>

@code {
    string SelectedValue { get; set; }

    class DialogPara
    {
        public bool CreateChannelDialogVisible { get; set; } = false;
        public bool CreateCategoryVisible { get; set; } = false;
        public bool IsRenameGroupDialogVisible { get; set; } = false;
        public bool IsDeleteCategoryDialogVisible { get; set; } = false;

        public ChannelCategory CurrentCategory { get; set; } = new()
        {
            Id = 0,  
            GroupId = 0,
            CategoryName = string.Empty,
            IsDeleted = true, 
            Created = new byte[]{0x00}
        };

        public void HandleCancel()
        {
            CreateCategoryVisible = false;
            IsRenameGroupDialogVisible = false;
            IsDeleteCategoryDialogVisible = false;
            CreateChannelDialogVisible = false;
        }
    } DialogPara D_Para = new();

    class ContextMenuPara
    {
        public bool IsMainContextmenuDisabled = false;
        public bool IsCategoryContextmenuDisabled = false;
        public bool IsChannelContextMenuDisabled = false;

        /* When can a instance initialize?
        * when chewing at tuesday.
        * Because its chewsday init.
        * ——Lam T. */ 
        public void Init()
        {
            IsMainContextmenuDisabled = false;
            IsCategoryContextmenuDisabled = false;
            IsChannelContextMenuDisabled = false;
        }
        public void EnableMainContextMenu()
        {
            IsMainContextmenuDisabled = false;
            IsCategoryContextmenuDisabled = true;
            IsChannelContextMenuDisabled = true;
        }
        public void EnableCategoryContextMenu()
        {
            IsCategoryContextmenuDisabled = false;
            IsChannelContextMenuDisabled = true;
            IsMainContextmenuDisabled = true;
        }
        public void EnableChannelContextMenu()
        {
            IsChannelContextMenuDisabled = false;
            IsMainContextmenuDisabled = true;
            IsCategoryContextmenuDisabled = true;
        }
    }

    ContextMenuPara C_Para = new();

    [ParameterAttribute]
    public KeyValuePair<Group,bool> CurrectGroup { get; set; }
    [ParameterAttribute]
    public string userId { get; set; }
    [ParameterAttribute]
    public string UserName { get; set; }
    [ParameterAttribute]
    public Dictionary<ChannelCategory, IList<Channel>> ChannelsMap { get; set; } = new();
    [ParameterAttribute]
    public int CurrentChannelId { get; set; } = 0;
    [ParameterAttribute]
    public int LastChannelId { get; set; } = 0;
    [ParameterAttribute]
    public bool HasInvitePermission { get; set; } = false;
    [ParameterAttribute]
    public bool HasCategoryDeletePermission { get; set; } = false;
    [ParameterAttribute]
    public bool HasCategoryCreatePermission { get; set; } = false;
    [ParameterAttribute]
    public bool HasChannelCreatePermission { get; set; } = false;
    [ParameterAttribute]
    public bool HasCategoryRenamePermission { get; set; } = false;
    [ParameterAttribute]
    public bool IsOwned { get; set; } = false;
    [ParameterAttribute]
    public EventCallback<int> OnCurrentChannelChanged { get; set; }

    private async Task DoCreateCategory(string name)
    {
        try
        {
            await Cm.CreateCategory(name, userId, CurrectGroup.Key.Id);
            Snackbar.Add("成功创建该类别", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add("无法创建该类别", Severity.Error);
        }
        D_Para.HandleCancel();
    }
    private async Task DoCreateChannel(string name)
    {
        try
        {
            await Cm.CreateChannelAsync(name, userId, D_Para.CurrentCategory.GroupId,D_Para.CurrentCategory.Id);
            Snackbar.Add("成功创建该频道", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add("无法创建该频道", Severity.Error);
        }
        D_Para.HandleCancel();
    }
    private async Task DeleteChannel(int cid)
    {
        D_Para.HandleCancel();
    }
    private async Task DeleteCategory(int id)
    {
        try
        {
            await Cm.DeleteCategory(userId, id);
            Snackbar.Add("成功删除该类别", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add("无法删除该类别", Severity.Error);
        }
        D_Para.HandleCancel();
    }
    private void OnCategoryAdded(Dictionary<ChannelCategory, IList<Channel>> map)
    {
        ChannelsMap = map;
    }
    private async Task ChannelCompOnClick(int id)
    {
        if (LastChannelId == 0)
            LastChannelId = id;
        else if(CurrentChannelId != LastChannelId)
            CurrentChannelId = id;
        await OnCurrentChannelChanged.InvokeAsync(id);
    }
    protected override async Task OnInitializedAsync()
    {
         Gme.SelectedGroupChangedEvent += async value =>
         {
             CurrectGroup = value;
             ChannelsMap = Cm.ChannelsDictionary;
         };
        Cme.CategoryAddedEvent += OnCategoryAdded;
    }
}
