@page "/test"
@using System.Security.Claims
@using System.Text
@using MisteryBlazor.Data.GroupsModel
@using MisteryBlazor.Pages.ContextMenu
@using MisteryBlazor.Pages.Room.Dialog
@using MisteryBlazor.Pages.Room.Dialog.ChannelDialog
@using MisteryBlazor.Pages.Room.Shared.DetialPage
@using MisteryBlazor.Services.DAL
@using MisteryBlazor.Services.DataManager
@using MisteryBlazor.Services.Events
@using MisteryBlazor.StringUtils
@using OneOf.Types
@using Placement = AntDesign.Placement
@using Color = MudBlazor.Color
@inject GroupDataService Gps;
@inject ChannelsManager Cm;
@inject GroupsManager Gm;
@inject GroupManagerEvents Gme;
@inject ChannelManagerEvents Cme;
@inject ISnackbar Snackbar;

<div id="room-sidebar-main" class="room-sidebar">
    <div class="room-sidebar-main-container mud-theme-primary mud-elevation-2">
        <div class="room-sidebar-body">
            @if (CurrentGroup.Key is not null && !CurrentGroup.Key.IsDeleted)
            {
                <div class="room-sidebar-top mud-theme-primary unable-to-select mud-elevation-1">
                    <div class="room-sidebar-textgroup">
                        <div class="fs-4 fw-bold room-sidebar-top-text">@CurrentGroup.Key.GroupName.ToStringFromASCIIByte()</div>
                        <div class="fs-7 room-sidebar-top-text-id"># @CurrentGroup.Key.Id</div>
                    </div>
                </div>
                @if (ChannelsMap.Count <= 0)
                {
                    <div style="float: left; padding: 20px;" class="unable-to-select">
                        @if (CurrentGroup.Value || HasCategoryCreatePermission)
                        {
                            <div class="room-sidebar-alert">
                                <p>该群组还没有任何频道！</p></div>
                            <div class="room-sidebar-alert-text">① 在<span style="font-weight: bold;"> 空白处 </span>
                                右键添加一个类别</div>
                            <div class="room-sidebar-alert-text">
                                <p>② 在类别名称上右键新建一个频道</p></div>
                        }
                        else
                        {
                            <div class="room-sidebar-alert">
                                <p>该群组还没有任何频道！</p></div>
                        }
                    </div>
                }
            }
            <div class="room-sidebar-channels">
                <div class="room-sidebar-category-scroll room-scroller room-scroller-base-black">
                    @foreach (var c in ChannelsMap)
                    {
                        if (!c.Key.IsDeleted)
                        {
                            <_RoomSidebarChannel
                                color="Color.Dark"
                                CurrentCategory="c.Key"
                                CurrentChannels="c.Value"
                                IsOwned="@CurrentGroup.Value"
                                OnClick="id => ChannelCompOnClick(id)"
                                HandleChannelCreate="() => { D_Para.CurrentCategory = c.Key; D_Para.CreateChannelDialogVisible = true; }"
                                HandleChannelDelete="() => { return; }"
                                HandleCategoryDelete="() => { D_Para.CurrentCategory = c.Key; D_Para.IsDeleteCategoryDialogVisible = true; }"
                                HandleCategoryRename="name=>RenameCategory(userId,c.Key.Id,name)"/>
                        }
                    }
                </div>
            </div>
        </div>
        <div class="room-sidebar-usercontext">
            <div class="room-sidebar-voice mud-theme-secondary" style="display: none;">
                <div class="room-sidebar-voice-voiceInfoIco mud-theme-secondary">
                    <span class="room-sidebar-voice-voiceico">
                        <MudIcon Icon="@Icons.Outlined.SignalCellularAlt" Size="Size.Medium"></MudIcon>
                    </span>
                    <div class="room-sidebar-voice-VoiceInfo">
                        <div class="fw-bold room-sidebar-voice-VoiceInfo-text-VoiceConnected">Voice Connected</div>
                        <div class="room-sidebar-voice-VoiceInfo-text-stream">Stream</div>
                    </div>
                </div>
                <div class="room-sidebar-voice-icons">
                    <span class="room-sidebar-voice-icons-OutlinedInfo">
                        <MudIcon Icon="@Icons.Outlined.Info"></MudIcon>
                    </span>
                    <span class="room-sidebar-voice-icons-FulledCall">
                        <MudIcon Icon="@Icons.Filled.Call"></MudIcon>
                    </span>
                </div>
            </div>

            <div class="room-sidebar-profile mud-theme-secondary">
                <div class="room-sidebar-profile-container">
                    <span class="room-sidebar-profile-avatar">
                        <MudAvatar Size="Size.Medium"></MudAvatar>
                    </span>
                    @{
                        StringBuilder UserId = new();
                        UserId.Append("# ").Append(@userId);
                        <div class="room-sidebar-profile-info">
                            @if (UserName.Length >= 10)
                            {
                                string newName = UserName[0..10] + "...";
                                <div class="fs-7 room-sidebar-profile-info-name fw-bold">@newName</div>
                            }
                            else
                            {
                                <div class="fs-7 room-sidebar-profile-info-name fw-bold">@UserName</div>
                            }
                            <div class="room-sidebar-profile-info-id">@UserId.ToString()</div>
                        </div>
                    }
                    <div class="room-sidebar-profile-icons">
                        <span class="room-sidebar-profile-icons-mic">
                            <MudIcon Icon="@Icons.Filled.Mic" Size="Size.Medium"></MudIcon>
                        </span>
                        <span class="room-sidebar-profile-icons-headset">
                            <MudIcon Icon="@Icons.Filled.Headset" Size="Size.Medium"></MudIcon>
                        </span>
                        <span class="room-sidebar-profile-icons-setting">
                            <MudIcon Icon="@Icons.Filled.Settings" Size="Size.Medium"></MudIcon>
                        </span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<CreateCategoryDialog
    Visible="@D_Para.CreateCategoryVisible"
    HandleCancel="@D_Para.HandleCancel"
    HandleOk="async name => await CreateCategory(name)"
/>

<CreateChannelDialog
    Visible="@D_Para.CreateChannelDialogVisible"
    HandleCancel="@D_Para.HandleCancel"
    HandleOk="async name => await CreateChannel(name)"
/>

<DeleteCategory
    Id="@D_Para.CurrentCategory.Id"
    Context="@D_Para.CurrentCategory.CategoryName.ToStringFromASCIIByte()"
    Visible="@D_Para.IsDeleteCategoryDialogVisible"
    HandleCancel="@D_Para.HandleCancel"
    HandleOk="async id => await DeleteCategory(id)"
/>


@{
    @if (CurrentGroup.Key is not null)
    {
        HashSet<MisteryMenuItem> ContextMainMenuItems = new();
        @if (CurrentGroup.Value || HasCategoryCreatePermission)
        {
            ContextMainMenuItems.Add(new MisteryMenuItem("创建一个类别",arg => D_Para.CreateCategoryVisible = true));
        }
        @if (CurrentGroup.Value || HasInvitePermission )
        {
            ContextMainMenuItems.Add(new MisteryMenuItem("创建邀请链接"));
        }
        ContextMainMenuItems.Add(MisteryMenuItem.Divider());
        ContextMainMenuItems.Add(new MisteryMenuItem("群属性"));
        <MisteryContextMenu Id="room-sidebar-mainmenu" Items="@ContextMainMenuItems" TargetId="room-sidebar-main"/>
    }
}
@code {
    string SelectedValue { get; set; }

    /// <summary>
    /// 内部类，提供用于本组件所有 Dialog 的操作和状态数据
    /// </summary>
    class DialogPara
    {
        public bool CreateChannelDialogVisible { get; set; } = false;
        public bool CreateCategoryVisible { get; set; } = false;
        public bool IsRenameGroupDialogVisible { get; set; } = false;
        public bool IsDeleteCategoryDialogVisible { get; set; } = false;

        public ChannelCategory CurrentCategory { get; set; } = new()
        {
            Id = 0,  
            GroupId = 0,
            CategoryName = string.Empty,
            IsDeleted = true, 
            Created = new byte[]{0x00}
        };

        public void HandleCancel()
        {
            CreateCategoryVisible = false;
            IsRenameGroupDialogVisible = false;
            IsDeleteCategoryDialogVisible = false;
            CreateChannelDialogVisible = false;
        }
    } DialogPara D_Para = new();

    [ParameterAttribute]
    public KeyValuePair<Group,bool> CurrentGroup { get; set; }
    [ParameterAttribute]
    public string userId { get; set; }
    [ParameterAttribute]
    public string UserName { get; set; }
    [ParameterAttribute]
    public Dictionary<ChannelCategory, IList<Channel>> ChannelsMap { get; set; } = new();
    [ParameterAttribute]
    public int CurrentChannelId { get; set; } = 0;
    [ParameterAttribute]
    public int LastChannelId { get; set; } = 0;
    [ParameterAttribute]
    public bool HasInvitePermission { get; set; } = false;
    [ParameterAttribute]
    public bool HasCategoryDeletePermission { get; set; } = false;
    [ParameterAttribute]
    public bool HasCategoryCreatePermission { get; set; } = false;
    [ParameterAttribute]
    public bool HasChannelCreatePermission { get; set; } = false;
    [ParameterAttribute]
    public bool HasCategoryRenamePermission { get; set; } = false;
    [ParameterAttribute]
    public EventCallback<int> OnCurrentChannelChanged { get; set; }

    private async Task CreateCategory(string name)
    {
        try
        {
            await Cm.CreateCategory(name, userId, CurrentGroup.Key.Id);
            Snackbar.Add("成功创建该类别", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add("无法创建该类别", Severity.Error);
        }
        D_Para.HandleCancel();
    }
    private async Task CreateChannel(string name)
    {
        try
        {
            await Cm.CreateChannelAsync(name, userId, D_Para.CurrentCategory.GroupId,D_Para.CurrentCategory.Id);
            Snackbar.Add("成功创建该频道", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add("无法创建该频道", Severity.Error);
        }
        D_Para.HandleCancel();
    }
    private async Task DeleteChannel(int cid)
    {
        D_Para.HandleCancel();
    }
    private async Task DeleteCategory(int id)
    {
        try
        {
            await Cm.DeleteCategory(userId, id);
            Snackbar.Add("成功删除该类别", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add("无法删除该类别", Severity.Error);
        }
        D_Para.HandleCancel();
    }
    private void OnCategoryAdded(Dictionary<ChannelCategory, IList<Channel>> map)
    {
        ChannelsMap = map;
    }
    private async Task ChannelCompOnClick(int id)
    {
        if (LastChannelId == 0)
            LastChannelId = id;
        else if(CurrentChannelId != LastChannelId)
            CurrentChannelId = id;
        await OnCurrentChannelChanged.InvokeAsync(id);
    }
    private async Task RenameCategory(string uid, int cid, string name)
    {
        try
        {
            await Cm.UpdateCategoryName(cid, uid, name);
            Snackbar.Add("成功命名该类别", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add("无法命名该类别", Severity.Error);
        }
    }
    protected override async Task OnInitializedAsync()
    {
         Gme.SelectedGroupChangedEvent += async value =>
         {
             CurrentGroup = value;
             ChannelsMap = Cm.ChannelsDictionary;
         };
        Cme.CategoryAddedEvent += OnCategoryAdded;
    }
}
