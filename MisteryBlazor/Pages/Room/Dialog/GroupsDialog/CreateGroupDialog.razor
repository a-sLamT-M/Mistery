@using System.ComponentModel.DataAnnotations
@using System.Text
@using Microsoft.Extensions.Logging
@using MisteryBlazor.Marcos
@using MisteryBlazor.Services.DAL
@using MisteryBlazor.Services.DataManager
@using MisteryBlazor.StringUtils
@inject ILogger<CreateGroupDialog> Logger
@inject GroupsManager Gm
@inject ISnackbar Snackbar

<MudForm>
    <MudDialog Class="mud-theme-primary room-dialog-creategroup mb-3">
        <DialogContent>
            <MudPaper Class="mud-theme-primary">
                <MudTextField T="string" @bind-Text="@m.GroupName" Label="Group Name" Required="true" RequiredError="Group Name is required!"
                              Validation="(new Func<string, IEnumerable<string>>(Validation))" Variant="Variant.Filled" Margin="Margin.Dense"/>
            </MudPaper>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel" Color="MudBlazor.Color.Error">Cancel</MudButton>
            <MudButton OnClick="Submit" Color="MudBlazor.Color.Inherit">Ok</MudButton>
        </DialogActions>
    </MudDialog>
</MudForm>   

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    class InputModel
    {
        [Required]
        [StringLength(90,ErrorMessage = "该名称过长或过短", MinimumLength = 1)] 
        public string GroupName { get; set; } = String.Empty;
    }
    [ParameterAttribute]
    public string Uid { get; set; } = String.Empty;

    InputModel m = new();

    private async Task Submit()
    {
        Validation(m.GroupName);
        if (m.GroupName.Length <= 0)
        {
            Logger.LogInformation("STILL EMPTY! Create Group Name and ID: " + m.GroupName + "/" + Uid);
            Snackbar.Add("Failed to create a group.", Severity.Error);
            return;
        }
        int id = await Create();
        if (id > 0)
        {
            Snackbar.Add("Create group successfully. ID: "+id, Severity.Success);
            MudDialog.Close(DialogResult.Ok(id));
        }
        else
        {
            Snackbar.Add("Failed to create a group.", Severity.Error);
            MudDialog.Cancel();
        }
    }

    private async Task<int> Create()
    {
        try
        {
            return await Gm.Create(Uid, m.GroupName);
        }
        catch (Exception e)
        {
            Snackbar.Add("Failed to create a group.", Severity.Error);
        }
        return 0;
    }

    private IEnumerable<string> Validation(string str)
    {
        if (str is null)
        {
            yield return "Group Name is required!";
            yield break;
        }
        if (str.ToASCIIByte().Length >= StringMarco.MAX_STRING_LENGTH)
        {
            yield return "名称过长";
            yield break;
        }
        if (str.Length < 1)
        {
            yield return "";
        }
    }

    private void Cancel() => MudDialog.Cancel();

}